//This is an autogenerated file that pulls data from
//Etsy's api to generate classes that can be deserialized
//to with newtonsoft.json when receiving JSON from the API
//Creator: Andy Riedlinger

//Need to create a special way to deal with getting count to deal with pagination for requests
//Can i use nullable ints in the object class and here for generation? int? id = null
/*
 * Methods with special changes:
 * getInventory needs to return 1 ListingInventory from object["results"] as results is not an array
 * Quite a few integer ids still need to be turned to string to handle the value, still debating making all ints strings
 * I would love to make the ids longs, since that would be more efficent, but they need to be able to hold null values.
 * Maybe later I can do this with a datacontractor to turn null into -1 or something gianormous to indicate null
 */

using System;
using System.Collections.Generic;
using DevDefined.OAuth.Consumer;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using QventoryApiTest;

namespace Etsy
{

    public class EtsyApi
    {

        public IOAuthSession Session { get; set; }
        private JsonSerializerSettings settings = new JsonSerializerSettings
        {
            NullValueHandling = NullValueHandling.Ignore,
            MissingMemberHandling = MissingMemberHandling.Ignore,
            Formatting = Formatting.Indented
        };

        private string baseUrl = @"https://openapi.etsy.com/v2";

        public EtsyApi(IOAuthSession session)
        {
            Session = session;
        }

        ///<summary>Get a list of all methods available.</summary>
        public ApiMethod[] getMethodTable(string includes = null, string fields = null)
        {
            string url = baseUrl + "/?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ApiMethod[]>(results.ToString(), settings);
        }

        ///<summary>Pings a public v2 uri to get a performance baseline</summary>
        public string getPublicBaseline(string includes = null, string fields = null)
        {
            string url = baseUrl + "/baseline?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Retrieves a top-level Category by tag.</summary>
        public Category[] getCategory(string tag, string includes = null, string fields = null)
        {
            string url = baseUrl + "/categories/" + tag + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Category[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a second-level Category by tag and subtag.</summary>
        public Category[] getSubCategory(string tag, string subtag, string includes = null, string fields = null)
        {
            string url = baseUrl + "/categories/" + tag + "/" + subtag + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Category[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a third-level Category by tag, subtag and subsubtag.</summary>
        public Category[] getSubSubCategory(string tag, string subtag, string subsubtag, string includes = null, string fields = null)
        {
            string url = baseUrl + "/categories/" + tag + "/" + subtag + "/" + subsubtag + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Category[]>(results.ToString(), settings);
        }

        ///<summary>Finds all Country.</summary>
        public Country[] findAllCountry(string includes = null, string fields = null)
        {
            string url = baseUrl + "/countries?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Country[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a Country by id.</summary>
        public Country[] getCountry(int country_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/countries/" + country_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Country[]>(results.ToString(), settings);
        }

        ///<summary>Get the country info for the given ISO code.</summary>
        public Country[] findByIsoCode(string iso_code, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/countries/iso/" + iso_code + "?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Country[]>(results.ToString(), settings);
        }

        ///<summary>Finds all FeaturedTreasuries.</summary>
        public FeaturedTreasury[] findAllFeaturedTreasuries(int limit = 25, int offset = 0, string page = null, string region = "__ALL_REGIONS__", string includes = null, string fields = null)
        {
            string url = baseUrl + "/featured_treasuries?limit=" + limit + "&offset=" + offset + "&region=" + region + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<FeaturedTreasury[]>(results.ToString(), settings);
        }

        ///<summary>Finds FeaturedTreasury by numeric ID.</summary>
        public FeaturedTreasury[] getFeaturedTreasuryById(int featured_treasury_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/featured_treasuries/" + featured_treasury_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<FeaturedTreasury[]>(results.ToString(), settings);
        }

        ///<summary>Finds all listings for a certain FeaturedTreasury.</summary>
        public Listing[] findAllListingsForFeaturedTreasuryId(int featured_treasury_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/featured_treasuries/" + featured_treasury_id + "/listings?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Finds all active listings for a certain FeaturedTreasury.</summary>
        public Listing[] findAllActiveListingsForFeaturedTreasuryId(int featured_treasury_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/featured_treasuries/" + featured_treasury_id + "/listings/active?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Finds all FeaturedTreasury listings.</summary>
        public Listing[] findAllFeaturedListings(int limit = 25, int offset = 0, string page = null, string region = "__ALL_REGIONS__", string includes = null, string fields = null)
        {
            string url = baseUrl + "/featured_treasuries/listings?limit=" + limit + "&offset=" + offset + "&region=" + region + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Finds FeaturedTreasury listings that are currently displayed on a regional homepage.</summary>
        public Listing[] findAllCurrentFeaturedListings(string region = "US", string includes = null, string fields = null)
        {
            string url = baseUrl + "/featured_treasuries/listings/homepage_current?region=" + region + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Finds all FeaturedTreasury by numeric owner_id.</summary>
        public FeaturedTreasury[] findAllFeaturedTreasuriesByOwner(int owner_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/featured_treasuries/owner/" + owner_id + "?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<FeaturedTreasury[]>(results.ToString(), settings);
        }

        ///<summary>Get a guest by ID.</summary>
        public Guest[] getGuest(string guest_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/guests/" + guest_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Guest[]>(results.ToString(), settings);
        }

        ///<summary>Get all guest's carts</summary>
        public GuestCart[] findAllGuestCarts(string guest_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/guests/" + guest_id + "/carts?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<GuestCart[]>(results.ToString(), settings);
        }

        ///<summary>Add a listing to guest's cart</summary>
        public void addToGuestCart(string guest_id, int listing_id, int quantity = 1, string selected_variations = null, string personalization = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/guests/" + guest_id + "/carts?listing_id=" + listing_id + "&quantity=" + quantity + "&";
            if (selected_variations != null)
            {
                url += "selected_variations=" + selected_variations + "&";
            }
            if (personalization != null)
            {
                url += "personalization=" + personalization + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Update a guest's cart listing purchase quantity</summary>
        public void updateGuestCartListingQuantity(string guest_id, int listing_id, int quantity, int listing_customization_id = 0, string includes = null, string fields = null)
        {
            string url = baseUrl + "/guests/" + guest_id + "/carts?listing_id=" + listing_id + "&quantity=" + quantity + "&listing_customization_id=" + listing_customization_id + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Remove a listing from a guest's cart</summary>
        public void removeGuestCartListing(string guest_id, int listing_id, int listing_customization_id = 0, string includes = null, string fields = null)
        {
            string url = baseUrl + "/guests/" + guest_id + "/carts?listing_id=" + listing_id + "&listing_customization_id=" + listing_customization_id + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Get a guest's cart</summary>
        public GuestCart[] findGuestCart(string guest_id, string cart_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/guests/" + guest_id + "/carts/" + cart_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<GuestCart[]>(results.ToString(), settings);
        }

        ///<summary>Update a guest's cart</summary>
        public void updateGuestCart(string guest_id, string cart_id, string destination_country_id = null, string message_to_seller = null, string coupon_code = null, string shipping_option_id = null, string destination_zip = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/guests/" + guest_id + "/carts/" + cart_id + "?";
            if (destination_country_id != null)
            {
                url += "destination_country_id=" + destination_country_id + "&";
            }
            if (message_to_seller != null)
            {
                url += "message_to_seller=" + message_to_seller + "&";
            }
            if (coupon_code != null)
            {
                url += "coupon_code=" + coupon_code + "&";
            }
            if (shipping_option_id != null)
            {
                url += "shipping_option_id=" + shipping_option_id + "&";
            }
            if (destination_zip != null)
            {
                url += "destination_zip=" + destination_zip + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Delete a guest's cart</summary>
        public void deleteGuestCart(string guest_id, string cart_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/guests/" + guest_id + "/carts/" + cart_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Claim this guest to the associated user. Merges the GuestCart's associated with this GuestId into the logged in User's Carts. Returns the number of listings merged in meta['listings_merged'].</summary>
        public void claimGuest(string guest_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/guests/" + guest_id + "/claim?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Merge this guest to a different guest. Merges the GuestCart's associated with this GuestId into the target guest's cart. Returns the number of listings merged in meta['listings_merged'].</summary>
        public void mergeGuest(string guest_id, string target_guest_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/guests/" + guest_id + "/merge?target_guest_id=" + target_guest_id + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>A helper method that generates a Guest ID to associate to this anonymous session. This method is not strictly necessary, as any sufficiently random guest ID that is 13 characters in length will suffice and automatically create a guest account on use if it does not yet exist.</summary>
        public Guest[] generateGuest(string includes = null, string fields = null)
        {
            string url = baseUrl + "/guests/generator?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Guest[]>(results.ToString(), settings);
        }

        ///<summary>Lists available image types along with their supported sizes.</summary>
        public ImageType[] listImageTypes(string includes = null, string fields = null)
        {
            string url = baseUrl + "/image_types?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ImageType[]>(results.ToString(), settings);
        }

        ///<summary>Creates a new Listing.</summary>
        public void createListing(int quantity, string title, string description, float price, string who_made, bool is_supply, string when_made, string materials = null, string shop_section_id = null, string image_ids = null, string is_customizable = null, string non_taxable = null, string image = null, string state = "active", string shipping_template_id = null, string processing_min = null, string processing_max = null, string category_id = null, string taxonomy_id = null, string tags = null, string recipient = null, string occasion = null, string style = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings?quantity=" + quantity + "&title=" + title + "&description=" + description + "&price=" + price + "&state=" + state + "&who_made=" + who_made + "&is_supply=" + is_supply + "&when_made=" + when_made + "&";
            if (materials != null)
            {
                url += "materials=" + materials + "&";
            }
            if (shop_section_id != null)
            {
                url += "shop_section_id=" + shop_section_id + "&";
            }
            if (image_ids != null)
            {
                url += "image_ids=" + image_ids + "&";
            }
            if (is_customizable != null)
            {
                url += "is_customizable=" + is_customizable + "&";
            }
            if (non_taxable != null)
            {
                url += "non_taxable=" + non_taxable + "&";
            }
            if (image != null)
            {
                url += "image=" + image + "&";
            }
            if (shipping_template_id != null)
            {
                url += "shipping_template_id=" + shipping_template_id + "&";
            }
            if (processing_min != null)
            {
                url += "processing_min=" + processing_min + "&";
            }
            if (processing_max != null)
            {
                url += "processing_max=" + processing_max + "&";
            }
            if (category_id != null)
            {
                url += "category_id=" + category_id + "&";
            }
            if (taxonomy_id != null)
            {
                url += "taxonomy_id=" + taxonomy_id + "&";
            }
            if (tags != null)
            {
                url += "tags=" + tags + "&";
            }
            if (recipient != null)
            {
                url += "recipient=" + recipient + "&";
            }
            if (occasion != null)
            {
                url += "occasion=" + occasion + "&";
            }
            if (style != null)
            {
                url += "style=" + style + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a Listing by id.</summary>
        public Listing[] getListing(string listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            if (includes != null && (includes.Contains("Inventory") || includes.Contains("inventory")))
            {
                //Should not return inventory as array, turn array into first object in array for each listing returned
                foreach (JObject o in results)
                {
                    o["Inventory"] = o["Inventory"][0];
                }
            }
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Updates a Listing</summary>
        public void updateListing(int listing_id, string quantity = null, string title = null, string description = null, string price = null, string materials = null, string renew = null, string shipping_template_id = null, string shop_section_id = null, string state = "active", string image_ids = null, string is_customizable = null, string item_weight = null, string item_length = null, string item_width = null, string item_height = null, string item_weight_unit = null, string item_dimensions_unit = null, string non_taxable = null, string category_id = null, string taxonomy_id = null, string tags = null, string who_made = null, string is_supply = null, string when_made = null, string recipient = null, string occasion = null, string style = null, string processing_min = null, string processing_max = null, string featured_rank = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "?state=" + state + "&";
            if (quantity != null)
            {
                url += "quantity=" + quantity + "&";
            }
            if (title != null)
            {
                url += "title=" + title + "&";
            }
            if (description != null)
            {
                url += "description=" + description + "&";
            }
            if (price != null)
            {
                url += "price=" + price + "&";
            }
            if (materials != null)
            {
                url += "materials=" + materials + "&";
            }
            if (renew != null)
            {
                url += "renew=" + renew + "&";
            }
            if (shipping_template_id != null)
            {
                url += "shipping_template_id=" + shipping_template_id + "&";
            }
            if (shop_section_id != null)
            {
                url += "shop_section_id=" + shop_section_id + "&";
            }
            if (image_ids != null)
            {
                url += "image_ids=" + image_ids + "&";
            }
            if (is_customizable != null)
            {
                url += "is_customizable=" + is_customizable + "&";
            }
            if (item_weight != null)
            {
                url += "item_weight=" + item_weight + "&";
            }
            if (item_length != null)
            {
                url += "item_length=" + item_length + "&";
            }
            if (item_width != null)
            {
                url += "item_width=" + item_width + "&";
            }
            if (item_height != null)
            {
                url += "item_height=" + item_height + "&";
            }
            if (item_weight_unit != null)
            {
                url += "item_weight_unit=" + item_weight_unit + "&";
            }
            if (item_dimensions_unit != null)
            {
                url += "item_dimensions_unit=" + item_dimensions_unit + "&";
            }
            if (non_taxable != null)
            {
                url += "non_taxable=" + non_taxable + "&";
            }
            if (category_id != null)
            {
                url += "category_id=" + category_id + "&";
            }
            if (taxonomy_id != null)
            {
                url += "taxonomy_id=" + taxonomy_id + "&";
            }
            if (tags != null)
            {
                url += "tags=" + tags + "&";
            }
            if (who_made != null)
            {
                url += "who_made=" + who_made + "&";
            }
            if (is_supply != null)
            {
                url += "is_supply=" + is_supply + "&";
            }
            if (when_made != null)
            {
                url += "when_made=" + when_made + "&";
            }
            if (recipient != null)
            {
                url += "recipient=" + recipient + "&";
            }
            if (occasion != null)
            {
                url += "occasion=" + occasion + "&";
            }
            if (style != null)
            {
                url += "style=" + style + "&";
            }
            if (processing_min != null)
            {
                url += "processing_min=" + processing_min + "&";
            }
            if (processing_max != null)
            {
                url += "processing_max=" + processing_max + "&";
            }
            if (featured_rank != null)
            {
                url += "featured_rank=" + featured_rank + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Deletes a Listing</summary>
        public void deleteListing(int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Get all of the attributes for a listing</summary>
        public PropertyValue[] getAttributes(int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/attributes?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<PropertyValue[]>(results.ToString(), settings);
        }

        ///<summary>Get an attribute for a listing</summary>
        public PropertyValue[] getAttribute(int listing_id, int property_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/attributes/" + property_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<PropertyValue[]>(results.ToString(), settings);
        }

        ///<summary>Update or populate an attribute for a listing</summary>
        public void updateAttribute(int listing_id, int property_id, string value_ids = null, string values = null, string scale_id = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/attributes/" + property_id + "?";
            if (value_ids != null)
            {
                url += "value_ids=" + value_ids + "&";
            }
            if (values != null)
            {
                url += "values=" + values + "&";
            }
            if (scale_id != null)
            {
                url += "scale_id=" + scale_id + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Delete an attribute for a listing</summary>
        public void deleteAttribute(int listing_id, int property_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/attributes/" + property_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a set of FavoriteListing objects associated to a Listing.</summary>
        public FavoriteListing[] findAllListingFavoredBy(int listing_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/favored-by?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<FavoriteListing[]>(results.ToString(), settings);
        }

        ///<summary>Finds all ListingFiles on a Listing</summary>
        public ListingFile[] findAllListingFiles(int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/files?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ListingFile[]>(results.ToString(), settings);
        }

        ///<summary>Upload a new listing file, or attach an existing file to this listing.  You must either provide the listing_file_idof an existing listing file, or the name and file data of a new file that you are uploading.  If you are attachinga file to a listing that is currently not digital, the listing will be converted to a digital listing.  This willcause the listing to have free shipping and will remove any variations.</summary>
        public void uploadListingFile(int listing_id, string listing_file_id = null, string file = null, string name = null, int rank = 1, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/files?rank=" + rank + "&";
            if (listing_file_id != null)
            {
                url += "listing_file_id=" + listing_file_id + "&";
            }
            if (file != null)
            {
                url += "file=" + file + "&";
            }
            if (name != null)
            {
                url += "name=" + name + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Finds a ListingFile by ID</summary>
        public ListingFile[] findListingFile(int listing_id, int listing_file_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/files/" + listing_file_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ListingFile[]>(results.ToString(), settings);
        }

        ///<summary>Removes the listing file from this listing.  If this is the last file on a listing, the listing will no longerbe considered a digital listing.</summary>
        public void deleteListingFile(int listing_id, int listing_file_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/files/" + listing_file_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a set of ListingImage objects associated to a Listing.</summary>
        public ListingImage[] findAllListingImages(int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/images?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ListingImage[]>(results.ToString(), settings);
        }

        ///<summary>Upload a new listing image, or re-associate a previously deleted one. You may associate an image                                      to any listing within the same shop that the image's original listing belongs to.                                      You MUST pass either a listing_image_id OR an image to this method.                                      Passing a listing_image_id serves to re-associate an image that was previously deleted.                                      If you wish to re-associate an image, we strongly recommend using the listing_image_id                                      argument as opposed to re-uploading a new image each time, to save bandwidth for you as well as us.                                      Pass overwrite=1 to replace the existing image at a given rank.                                      When uploading a new listing image with a watermark, pass is_watermarked=1; existing listing images                                      will not be affected by this parameter.</summary>
        public void uploadListingImage(int listing_id, string listing_image_id = null, string image = null, int rank = 1, bool overwrite = false, bool is_watermarked = false, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/images?rank=" + rank + "&overwrite=" + overwrite + "&is_watermarked=" + is_watermarked + "&";
            if (listing_image_id != null)
            {
                url += "listing_image_id=" + listing_image_id + "&";
            }
            if (image != null)
            {
                url += "image=" + image + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a Image_Listing by id.</summary>
        public ListingImage[] getImage_Listing(int listing_image_id, int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/images/" + listing_image_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ListingImage[]>(results.ToString(), settings);
        }

        ///<summary>Deletes a listing image. A copy of the file remains on our servers,                                       and so a deleted image may be re-associated with the listing without                                       re-uploading the original image; see uploadListingImage</summary>
        public void deleteListingImage(int listing_id, int listing_image_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/images/" + listing_image_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Get the inventory for a listing</summary>
        public ListingInventory getInventory(int listing_id, bool write_missing_inventory = false, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/inventory?write_missing_inventory=" + write_missing_inventory + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            return JsonConvert.DeserializeObject<ListingInventory>(objectResult["results"].ToString(), settings);
        }

        ///<summary>Update the inventory for a listing</summary>
        public void updateInventory(int listing_id, Dictionary<string, string> products, string price_on_property = null, string quantity_on_property = null, string sku_on_property = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/inventory?products=" + products + "&";
            if (price_on_property != null)
            {
                url += "price_on_property=" + price_on_property + "&";
            }
            if (quantity_on_property != null)
            {
                url += "quantity_on_property=" + quantity_on_property + "&";
            }
            if (sku_on_property != null)
            {
                url += "sku_on_property=" + sku_on_property + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Get a specific offering for a listing</summary>
        public ListingProduct[] getProduct(int listing_id, int product_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/products/" + product_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ListingProduct[]>(results.ToString(), settings);
        }

        ///<summary>Get a specific offering for a listing</summary>
        public ListingOffering[] getOffering(int listing_id, int product_id, int offering_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/products/" + product_id + "/offerings/" + offering_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ListingOffering[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a set of ShippingProfileEntries objects associated to a Listing.</summary>
        public ShippingInfo[] findAllListingShippingProfileEntries(string listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/shipping/info?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ShippingInfo[]>(results.ToString(), settings);
        }

        ///<summary>Creates a new ShippingInfo.</summary>
        public void createShippingInfo(float primary_cost, float secondary_cost, int listing_id, string destination_country_id = null, string region_id = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/shipping/info?primary_cost=" + primary_cost + "&secondary_cost=" + secondary_cost + "&";
            if (destination_country_id != null)
            {
                url += "destination_country_id=" + destination_country_id + "&";
            }
            if (region_id != null)
            {
                url += "region_id=" + region_id + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Get the shipping upgrades available for a listing.</summary>
        public ShippingUpgrade[] getListingShippingUpgrades(int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/shipping/upgrades?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ShippingUpgrade[]>(results.ToString(), settings);
        }

        ///<summary>Creates a new ShippingUpgrade for the listing. Will unlink the listing if linked to a ShippingTemplate.</summary>
        public void createListingShippingUpgrade(int listing_id, int type, string value, float price, float secondary_price, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/shipping/upgrades?type=" + type + "&value=" + value + "&price=" + price + "&secondary_price=" + secondary_price + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Updates a ShippingUpgrade on a listing. Will unlink the listing if linked to a ShippingTemplate.</summary>
        public void updateListingShippingUpgrade(int listing_id, int value_id, int type, float price, float secondary_price, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/shipping/upgrades?value_id=" + value_id + "&type=" + type + "&price=" + price + "&secondary_price=" + secondary_price + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Deletes the ShippingUpgrade from the listing. Will unlink the listing if linked to a ShippingTemplate.</summary>
        public void deleteListingShippingUpgrade(int listing_id, int value_id, int type, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/shipping/upgrades?value_id=" + value_id + "&type=" + type + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a set of Transaction objects associated to a Listing.</summary>
        public Transaction[] findAllListingTransactions(int listing_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/transactions?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Transaction[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a ListingTranslation by listing_id and language</summary>
        public ListingTranslation[] getListingTranslation(int listing_id, string language, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/translations/" + language + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ListingTranslation[]>(results.ToString(), settings);
        }

        ///<summary>Creates a ListingTranslation by listing_id and language</summary>
        public void createListingTranslation(int listing_id, string language, string title = null, string description = null, string tags = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/translations/" + language + "?";
            if (title != null)
            {
                url += "title=" + title + "&";
            }
            if (description != null)
            {
                url += "description=" + description + "&";
            }
            if (tags != null)
            {
                url += "tags=" + tags + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Updates a ListingTranslation by listing_id and language</summary>
        public void updateListingTranslation(int listing_id, string language, string title = null, string description = null, string tags = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/translations/" + language + "?";
            if (title != null)
            {
                url += "title=" + title + "&";
            }
            if (description != null)
            {
                url += "description=" + description + "&";
            }
            if (tags != null)
            {
                url += "tags=" + tags + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Deletes a ListingTranslation by listing_id and language</summary>
        public void deleteListingTranslation(int listing_id, string language, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/translations/" + language + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Gets all variation images on a listing</summary>
        public string getVariationImages(int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/variation-images?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Creates variation images on a listing</summary>
        public void updateVariationImages(int listing_id, string variation_images, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/" + listing_id + "/variation-images?variation_images=" + variation_images + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Finds all active Listings. (Note: the sort_on and sort_order options only work when combined with one of the search options: keywords, color, tags, location, etc.)</summary>
        public Listing[] findAllListingActive(int limit = 25, int offset = 0, string page = null, string keywords = null, string sort_on = "created", string sort_order = "down", string min_price = null, string max_price = null, string color = null, int color_accuracy = 0, string tags = null, string category = null, string location = null, string lat = null, string lon = null, string region = null, string geo_level = "city", bool accepts_gift_cards = false, bool translate_keywords = false, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/active?limit=" + limit + "&offset=" + offset + "&sort_on=" + sort_on + "&sort_order=" + sort_order + "&color_accuracy=" + color_accuracy + "&geo_level=" + geo_level + "&accepts_gift_cards=" + accepts_gift_cards + "&translate_keywords=" + translate_keywords + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (keywords != null)
            {
                url += "keywords=" + keywords + "&";
            }
            if (min_price != null)
            {
                url += "min_price=" + min_price + "&";
            }
            if (max_price != null)
            {
                url += "max_price=" + max_price + "&";
            }
            if (color != null)
            {
                url += "color=" + color + "&";
            }
            if (tags != null)
            {
                url += "tags=" + tags + "&";
            }
            if (category != null)
            {
                url += "category=" + category + "&";
            }
            if (location != null)
            {
                url += "location=" + location + "&";
            }
            if (lat != null)
            {
                url += "lat=" + lat + "&";
            }
            if (lon != null)
            {
                url += "lon=" + lon + "&";
            }
            if (region != null)
            {
                url += "region=" + region + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Collects the list of interesting listings</summary>
        public Listing[] getInterestingListings(int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/interesting?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Collects the list of listings used to generate the trending listing page</summary>
        public Listing[] getTrendingListings(int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/listings/trending?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Sign up for Pages</summary>
        public void pagesSignup(string brand_name, string brand_url, string name, string title, string email, string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages-signup?brand_name=" + brand_name + "&brand_url=" + brand_url + "&name=" + name + "&title=" + title + "&email=" + email + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Find a single page.</summary>
        public string findPage(int page_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/" + page_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Update a Page's data.</summary>
        public void updatePageData(int page_id, string page_name = null, string link = null, string byline = null, string avatar = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/" + page_id + "?";
            if (page_name != null)
            {
                url += "page_name=" + page_name + "&";
            }
            if (link != null)
            {
                url += "link=" + link + "&";
            }
            if (byline != null)
            {
                url += "byline=" + byline + "&";
            }
            if (avatar != null)
            {
                url += "avatar=" + avatar + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Upload a new avatar</summary>
        public void uploadAvatar(int page_id, string avatar, string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/" + page_id + "/avatar?avatar=" + avatar + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>See all of a page's public collections.</summary>
        public string findAllPageCollections(int page_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/" + page_id + "/collections?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Create a page collection for the given page.</summary>
        public void createPageCollection(int page_id, string name, string privacy_level = "public", string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/" + page_id + "/collections?name=" + name + "&privacy_level=" + privacy_level + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieve a single page collection.</summary>
        public string getPageCollection(int page_id, int collection_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/" + page_id + "/collections/" + collection_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Update a page collection.</summary>
        public void updatePageCollection(int page_id, int collection_id, string name = null, string privacy_level = "public", string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/" + page_id + "/collections/" + collection_id + "?privacy_level=" + privacy_level + "&";
            if (name != null)
            {
                url += "name=" + name + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Delete a page collection.</summary>
        public void deletePageCollection(int page_id, int collection_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/" + page_id + "/collections/" + collection_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieve the listings for a single page collection.</summary>
        public string getCollectionListings(int page_id, int collection_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/" + page_id + "/collections/" + collection_id + "/listings?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Add a listing to a page collection</summary>
        public void addListingToCollection(int page_id, int collection_id, int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/" + page_id + "/collections/" + collection_id + "/listings/" + listing_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Remove a listing from a collection</summary>
        public void removeListingFromCollection(int page_id, int collection_id, int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/" + page_id + "/collections/" + collection_id + "/listings/" + listing_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Find the collection ids for the authorized page and listing ids</summary>
        public string findPageCollectionsForListings(int page_id, int listing_ids, string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/" + page_id + "/collections/listings_map?listing_ids=" + listing_ids + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Add a user as curator for a page.</summary>
        public void addCurator(int page_id, int curator_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/" + page_id + "/curators/" + curator_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Remove a user from curating page.</summary>
        public void removeCurator(int page_id, int curator_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/" + page_id + "/curators/" + curator_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Search for people to add as curators.</summary>
        public string curatorPeopleSearch(string query, string includes = null, string fields = null)
        {
            string url = baseUrl + "/pages/find-curators?query=" + query + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Get an Etsy Payments Transaction</summary>
        public Payment[] findPayment(int payment_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/payments/" + payment_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Payment[]>(results.ToString(), settings);
        }

        ///<summary>Get a Payment Adjustments from a Payment Id</summary>
        public PaymentAdjustment[] findPaymentAdjustments(int payment_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/payments/" + payment_id + "/adjustments?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<PaymentAdjustment[]>(results.ToString(), settings);
        }

        ///<summary>Get an Etsy Payments Transaction Adjustment</summary>
        public PaymentAdjustment[] findPaymentAdjustment(int payment_id, int payment_adjustment_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/payments/" + payment_id + "/adjustments/" + payment_adjustment_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<PaymentAdjustment[]>(results.ToString(), settings);
        }

        ///<summary>Get Etsy Payments Transaction Adjustment Items</summary>
        public PaymentAdjustmentItem[] findPaymentAdjustmentItem(int payment_id, int payment_adjustment_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/payments/" + payment_id + "/adjustments/" + payment_adjustment_id + "/items?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<PaymentAdjustmentItem[]>(results.ToString(), settings);
        }

        ///<summary>Get an Etsy Payments Transaction Adjustment Item</summary>
        public PaymentAdjustmentItem[] findPaymentAdjustmentItem(int payment_id, int payment_adjustment_id, int payment_adjustment_item_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/payments/" + payment_id + "/adjustments/" + payment_adjustment_id + "/items/" + payment_adjustment_item_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<PaymentAdjustmentItem[]>(results.ToString(), settings);
        }

        ///<summary>Pings a private v2 uri to get a performance baseline</summary>
        public string getPrivateBaseline(string includes = null, string fields = null)
        {
            string url = baseUrl + "/private-baseline?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Add a value for a given property.</summary>
        public string getPropertyOptionModifier(int property_id, string category_id = null, string recipient_id = null, string sizing_scale = null, string weight_scale = null, string height_scale = null, string length_scale = null, string width_scale = null, string diameter_scale = null, string dimensions_scale = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/property_options/modifiers?property_id=" + property_id + "&";
            if (category_id != null)
            {
                url += "category_id=" + category_id + "&";
            }
            if (recipient_id != null)
            {
                url += "recipient_id=" + recipient_id + "&";
            }
            if (sizing_scale != null)
            {
                url += "sizing_scale=" + sizing_scale + "&";
            }
            if (weight_scale != null)
            {
                url += "weight_scale=" + weight_scale + "&";
            }
            if (height_scale != null)
            {
                url += "height_scale=" + height_scale + "&";
            }
            if (length_scale != null)
            {
                url += "length_scale=" + length_scale + "&";
            }
            if (width_scale != null)
            {
                url += "width_scale=" + width_scale + "&";
            }
            if (diameter_scale != null)
            {
                url += "diameter_scale=" + diameter_scale + "&";
            }
            if (dimensions_scale != null)
            {
                url += "dimensions_scale=" + dimensions_scale + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Finds all suggested property options for a given property.</summary>
        public string findAllSuggestedPropertyOptions(int property_id, string category_id = null, string recipient_id = null, string sizing_scale = null, string weight_scale = null, string height_scale = null, string length_scale = null, string width_scale = null, string diameter_scale = null, string dimensions_scale = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/property_options/suggested?property_id=" + property_id + "&";
            if (category_id != null)
            {
                url += "category_id=" + category_id + "&";
            }
            if (recipient_id != null)
            {
                url += "recipient_id=" + recipient_id + "&";
            }
            if (sizing_scale != null)
            {
                url += "sizing_scale=" + sizing_scale + "&";
            }
            if (weight_scale != null)
            {
                url += "weight_scale=" + weight_scale + "&";
            }
            if (height_scale != null)
            {
                url += "height_scale=" + height_scale + "&";
            }
            if (length_scale != null)
            {
                url += "length_scale=" + length_scale + "&";
            }
            if (width_scale != null)
            {
                url += "width_scale=" + width_scale + "&";
            }
            if (diameter_scale != null)
            {
                url += "diameter_scale=" + diameter_scale + "&";
            }
            if (dimensions_scale != null)
            {
                url += "dimensions_scale=" + dimensions_scale + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Find the property set for the category id</summary>
        public string findPropertySet(string category_id = null, string taxonomy_id = null, string recipient_id = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/property_sets?";
            if (category_id != null)
            {
                url += "category_id=" + category_id + "&";
            }
            if (taxonomy_id != null)
            {
                url += "taxonomy_id=" + taxonomy_id + "&";
            }
            if (recipient_id != null)
            {
                url += "recipient_id=" + recipient_id + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Retrieves a Shop_Receipt2 by id.</summary>
        public Receipt[] getShop_Receipt2(int receipt_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/receipts/" + receipt_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Receipt[]>(results.ToString(), settings);
        }

        ///<summary>Updates a Shop_Receipt2</summary>
        public void updateReceipt(int receipt_id, string was_paid = null, string was_shipped = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/receipts/" + receipt_id + "?";
            if (was_paid != null)
            {
                url += "was_paid=" + was_paid + "&";
            }
            if (was_shipped != null)
            {
                url += "was_shipped=" + was_shipped + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Finds all listings in a receipt</summary>
        public Listing[] findAllReceiptListings(int receipt_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/receipts/" + receipt_id + "/listings?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a set of Transaction objects associated to a Shop_Receipt2.</summary>
        public Transaction[] findAllShop_Receipt2Transactions(int receipt_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/receipts/" + receipt_id + "/transactions?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Transaction[]>(results.ToString(), settings);
        }

        ///<summary>Finds all Region.</summary>
        public Region[] findAllRegion(string includes = null, string fields = null)
        {
            string url = baseUrl + "/regions?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Region[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a Region by id.</summary>
        public Region[] getRegion(int region_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/regions/" + region_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Region[]>(results.ToString(), settings);
        }

        ///<summary></summary>
        public Region[] findEligibleRegions(string includes = null, string fields = null)
        {
            string url = baseUrl + "/regions/eligible?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Region[]>(results.ToString(), settings);
        }

        ///<summary>Find all Browse Segments</summary>
        public Segment[] findBrowseSegments(string region = "US", string path = "", string includes = null, string fields = null)
        {
            string url = baseUrl + "/segments?region=" + region + "&path=" + path + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Segment[]>(results.ToString(), settings);
        }

        ///<summary>Find Listings for a Segment by Segment path. NOTE: Offset must be an integer multiple of limit.</summary>
        public Listing[] findBrowseSegmentListings(string path, int limit = 25, int offset = 0, string page = null, string keywords = null, string sort_on = "created", string sort_order = "down", string min_price = null, string max_price = null, string ship_to = null, string location = null, string lat = null, string lon = null, string geo_level = "city", bool accepts_gift_cards = false, string includes = null, string fields = null)
        {
            string url = baseUrl + "/segments/listings?path=" + path + "&limit=" + limit + "&offset=" + offset + "&sort_on=" + sort_on + "&sort_order=" + sort_order + "&geo_level=" + geo_level + "&accepts_gift_cards=" + accepts_gift_cards + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (keywords != null)
            {
                url += "keywords=" + keywords + "&";
            }
            if (min_price != null)
            {
                url += "min_price=" + min_price + "&";
            }
            if (max_price != null)
            {
                url += "max_price=" + max_price + "&";
            }
            if (ship_to != null)
            {
                url += "ship_to=" + ship_to + "&";
            }
            if (location != null)
            {
                url += "location=" + location + "&";
            }
            if (lat != null)
            {
                url += "lat=" + lat + "&";
            }
            if (lon != null)
            {
                url += "lon=" + lon + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Find Browse SegmentPosters by Segment slug</summary>
        public SegmentPoster[] findBrowseSegmentPosters(string path = "", string includes = null, string fields = null)
        {
            string url = baseUrl + "/segments/posters?path=" + path + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<SegmentPoster[]>(results.ToString(), settings);
        }

        ///<summary>Get server time, in epoch seconds notation.</summary>
        public string getServerEpoch(string includes = null, string fields = null)
        {
            string url = baseUrl + "/server/epoch?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Check that the server is alive.</summary>
        public string ping(string includes = null, string fields = null)
        {
            string url = baseUrl + "/server/ping?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Returns postage costs for the shipping carrier based on the supplied package</summary>
        public void getShippingCosts(string origin_postal_code, int origin_country_id, string destination_postal_code, int destination_country_id, string shipping_provider_id, string mail_class, float weight, string origin_state = null, string destination_state = null, int ships_on_date = 0, string weight_units = "oz", string length = null, string width = null, string height = null, string dimension_units = "in", string signature_confirmation = null, int insurance_value = 0, bool saturday_delivery = false, string signature_confirmation_type = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/" + shipping_provider_id + "/postage-costs?origin_postal_code=" + origin_postal_code + "&origin_country_id=" + origin_country_id + "&destination_postal_code=" + destination_postal_code + "&destination_country_id=" + destination_country_id + "&mail_class=" + mail_class + "&ships_on_date=" + ships_on_date + "&weight=" + weight + "&weight_units=" + weight_units + "&dimension_units=" + dimension_units + "&insurance_value=" + insurance_value + "&saturday_delivery=" + saturday_delivery + "&";
            if (origin_state != null)
            {
                url += "origin_state=" + origin_state + "&";
            }
            if (destination_state != null)
            {
                url += "destination_state=" + destination_state + "&";
            }
            if (length != null)
            {
                url += "length=" + length + "&";
            }
            if (width != null)
            {
                url += "width=" + width + "&";
            }
            if (height != null)
            {
                url += "height=" + height + "&";
            }
            if (signature_confirmation != null)
            {
                url += "signature_confirmation=" + signature_confirmation + "&";
            }
            if (signature_confirmation_type != null)
            {
                url += "signature_confirmation_type=" + signature_confirmation_type + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a ShippingInfo by id.</summary>
        public ShippingInfo[] getShippingInfo(int shipping_info_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/info/" + shipping_info_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ShippingInfo[]>(results.ToString(), settings);
        }

        ///<summary>Updates a ShippingInfo with the given id.</summary>
        public void updateShippingInfo(int shipping_info_id, string destination_country_id = null, string primary_cost = null, string secondary_cost = null, string region_id = null, string listing_id = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/info/" + shipping_info_id + "?";
            if (destination_country_id != null)
            {
                url += "destination_country_id=" + destination_country_id + "&";
            }
            if (primary_cost != null)
            {
                url += "primary_cost=" + primary_cost + "&";
            }
            if (secondary_cost != null)
            {
                url += "secondary_cost=" + secondary_cost + "&";
            }
            if (region_id != null)
            {
                url += "region_id=" + region_id + "&";
            }
            if (listing_id != null)
            {
                url += "listing_id=" + listing_id + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Deletes the ShippingInfo with the given id.</summary>
        public void deleteShippingInfo(int shipping_info_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/info/" + shipping_info_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Returns postage costs for all mail classes for a shipping carrier based on the supplied package</summary>
        public void getPostageRates(string origin_postal_code, int origin_country_id, int destination_country_id, int shipping_provider_id, float weight, string destination_postal_code = null, string destination_state = null, int ships_on_date = 0, string package_type = "parcel", string weight_units = "oz", string length = null, string width = null, string height = null, string dimension_units = "in", string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/providers/" + shipping_provider_id + "/mail-class-rates?origin_postal_code=" + origin_postal_code + "&origin_country_id=" + origin_country_id + "&destination_country_id=" + destination_country_id + "&ships_on_date=" + ships_on_date + "&package_type=" + package_type + "&weight=" + weight + "&weight_units=" + weight_units + "&dimension_units=" + dimension_units + "&";
            if (destination_postal_code != null)
            {
                url += "destination_postal_code=" + destination_postal_code + "&";
            }
            if (destination_state != null)
            {
                url += "destination_state=" + destination_state + "&";
            }
            if (length != null)
            {
                url += "length=" + length + "&";
            }
            if (width != null)
            {
                url += "width=" + width + "&";
            }
            if (height != null)
            {
                url += "height=" + height + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Creates a new ShippingTemplate</summary>
        public void createShippingTemplate(string title, int origin_country_id, float primary_cost, float secondary_cost, string destination_country_id = null, string destination_region_id = null, string min_processing_days = null, string max_processing_days = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/templates?title=" + title + "&origin_country_id=" + origin_country_id + "&primary_cost=" + primary_cost + "&secondary_cost=" + secondary_cost + "&";
            if (destination_country_id != null)
            {
                url += "destination_country_id=" + destination_country_id + "&";
            }
            if (destination_region_id != null)
            {
                url += "destination_region_id=" + destination_region_id + "&";
            }
            if (min_processing_days != null)
            {
                url += "min_processing_days=" + min_processing_days + "&";
            }
            if (max_processing_days != null)
            {
                url += "max_processing_days=" + max_processing_days + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a ShippingTemplate by id.</summary>
        public ShippingTemplate[] getShippingTemplate(int shipping_template_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/templates/" + shipping_template_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ShippingTemplate[]>(results.ToString(), settings);
        }

        ///<summary>Updates a ShippingTemplate</summary>
        public void updateShippingTemplate(int shipping_template_id, string title = null, string origin_country_id = null, string min_processing_days = null, string max_processing_days = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/templates/" + shipping_template_id + "?";
            if (title != null)
            {
                url += "title=" + title + "&";
            }
            if (origin_country_id != null)
            {
                url += "origin_country_id=" + origin_country_id + "&";
            }
            if (min_processing_days != null)
            {
                url += "min_processing_days=" + min_processing_days + "&";
            }
            if (max_processing_days != null)
            {
                url += "max_processing_days=" + max_processing_days + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Deletes the ShippingTemplate with the given id.</summary>
        public void deleteShippingTemplate(int shipping_template_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/templates/" + shipping_template_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a set of ShippingTemplateEntry objects associated to a ShippingTemplate.</summary>
        public ShippingTemplate[] findAllShippingTemplateEntries(int shipping_template_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/templates/" + shipping_template_id + "/entries?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ShippingTemplate[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a list of shipping upgrades for the parent ShippingTemplate</summary>
        public ShippingUpgrade[] findAllShippingTemplateUpgrades(int shipping_template_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/templates/" + shipping_template_id + "/upgrades?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ShippingUpgrade[]>(results.ToString(), settings);
        }

        ///<summary>Creates a new ShippingUpgrade for the parent ShippingTemplate. Updates any listings linked to the ShippingTemplate.</summary>
        public void createShippingTemplateUpgrade(int shipping_template_id, int type, string value, float price, float secondary_price, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/templates/" + shipping_template_id + "/upgrades?type=" + type + "&value=" + value + "&price=" + price + "&secondary_price=" + secondary_price + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Updates a ShippingUpgrade of the parent ShippingTemplate. Updates any listings linked to the ShippingTemplate.</summary>
        public void updateShippingTemplateUpgrade(int shipping_template_id, int value_id, int type, float price, float secondary_price, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/templates/" + shipping_template_id + "/upgrades?value_id=" + value_id + "&type=" + type + "&price=" + price + "&secondary_price=" + secondary_price + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Deletes the ShippingUpgrade from the parent ShippingTemplate. Updates any listings linked to the ShippingTemplate.</summary>
        public void deleteShippingTemplateUpgrade(int shipping_template_id, int value_id, int type, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/templates/" + shipping_template_id + "/upgrades?value_id=" + value_id + "&type=" + type + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Creates a new ShippingTemplateEntry</summary>
        public void createShippingTemplateEntry(int shipping_template_id, float primary_cost, float secondary_cost, string destination_country_id = null, string destination_region_id = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/templates/entries?shipping_template_id=" + shipping_template_id + "&primary_cost=" + primary_cost + "&secondary_cost=" + secondary_cost + "&";
            if (destination_country_id != null)
            {
                url += "destination_country_id=" + destination_country_id + "&";
            }
            if (destination_region_id != null)
            {
                url += "destination_region_id=" + destination_region_id + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a ShippingTemplateEntry by id.</summary>
        public ShippingTemplateEntry[] getShippingTemplateEntry(int shipping_template_entry_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/templates/entries/" + shipping_template_entry_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ShippingTemplateEntry[]>(results.ToString(), settings);
        }

        ///<summary>Updates a ShippingTemplateEntry</summary>
        public void updateShippingTemplateEntry(int shipping_template_entry_id, string destination_country_id = null, string primary_cost = null, string secondary_cost = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/templates/entries/" + shipping_template_entry_id + "?";
            if (destination_country_id != null)
            {
                url += "destination_country_id=" + destination_country_id + "&";
            }
            if (primary_cost != null)
            {
                url += "primary_cost=" + primary_cost + "&";
            }
            if (secondary_cost != null)
            {
                url += "secondary_cost=" + secondary_cost + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Deletes the ShippingTemplateEntry</summary>
        public void deleteShippingTemplateEntry(int shipping_template_entry_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shipping/templates/entries/" + shipping_template_entry_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Finds all Shops.  If there is a keywords parameter, finds shops with shop_name starting with keywords.</summary>
        public Shop[] findAllShops(string shop_name = null, int limit = 25, int offset = 0, string page = null, string lat = null, string lon = null, float distance_max = 35, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops?limit=" + limit + "&offset=" + offset + "&distance_max=" + distance_max + "&";
            if (shop_name != null)
            {
                url += "shop_name=" + shop_name + "&";
            }
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (lat != null)
            {
                url += "lat=" + lat + "&";
            }
            if (lon != null)
            {
                url += "lon=" + lon + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Shop[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a Shop by id.</summary>
        public Shop[] getShop(string shop_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Shop[]>(results.ToString(), settings);
        }

        ///<summary>Updates a Shop</summary>
        public void updateShop(string shop_id, string title = null, string announcement = null, string sale_message = null, string policy_welcome = null, string policy_payment = null, string policy_shipping = null, string policy_refunds = null, string policy_additional = null, string policy_privacy = null, string policy_seller_info = null, string digital_sale_message = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "?";
            if (title != null)
            {
                url += "title=" + title + "&";
            }
            if (announcement != null)
            {
                url += "announcement=" + announcement + "&";
            }
            if (sale_message != null)
            {
                url += "sale_message=" + sale_message + "&";
            }
            if (policy_welcome != null)
            {
                url += "policy_welcome=" + policy_welcome + "&";
            }
            if (policy_payment != null)
            {
                url += "policy_payment=" + policy_payment + "&";
            }
            if (policy_shipping != null)
            {
                url += "policy_shipping=" + policy_shipping + "&";
            }
            if (policy_refunds != null)
            {
                url += "policy_refunds=" + policy_refunds + "&";
            }
            if (policy_additional != null)
            {
                url += "policy_additional=" + policy_additional + "&";
            }
            if (policy_privacy != null)
            {
                url += "policy_privacy=" + policy_privacy + "&";
            }
            if (policy_seller_info != null)
            {
                url += "policy_seller_info=" + policy_seller_info + "&";
            }
            if (digital_sale_message != null)
            {
                url += "digital_sale_message=" + digital_sale_message + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a ShopAbout object associated to a Shop.</summary>
        public ShopAbout[] getShopAbout(string shop_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/about?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ShopAbout[]>(results.ToString(), settings);
        }

        ///<summary>Upload a new shop banner image</summary>
        public void uploadShopBanner(string shop_id, string image, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/appearance/banner?image=" + image + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Deletes a shop banner image</summary>
        public void deleteShopBanner(string shop_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/appearance/banner?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves all Shop_Coupons by shop_id</summary>
        public Coupon[] findAllShopCoupons(string shop_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/coupons?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Coupon[]>(results.ToString(), settings);
        }

        ///<summary>Creates a new Coupon. May only have one of <code>free_shipping</code>, <code>pct_discount</code> or <code>fixed_discount</code></summary>
        public void createCoupon(string shop_id, string coupon_code, string pct_discount = null, bool seller_active = false, bool free_shipping = false, bool domestic_only = false, string currency_code = "USD", string fixed_discount = null, string minimum_purchase_price = null, string expiration_date = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/coupons?coupon_code=" + coupon_code + "&seller_active=" + seller_active + "&free_shipping=" + free_shipping + "&domestic_only=" + domestic_only + "&currency_code=" + currency_code + "&";
            if (pct_discount != null)
            {
                url += "pct_discount=" + pct_discount + "&";
            }
            if (fixed_discount != null)
            {
                url += "fixed_discount=" + fixed_discount + "&";
            }
            if (minimum_purchase_price != null)
            {
                url += "minimum_purchase_price=" + minimum_purchase_price + "&";
            }
            if (expiration_date != null)
            {
                url += "expiration_date=" + expiration_date + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a Shop_Coupon by id and shop_id</summary>
        public Coupon[] findCoupon(string shop_id, int coupon_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/coupons/" + coupon_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Coupon[]>(results.ToString(), settings);
        }

        ///<summary>Updates a coupon</summary>
        public void updateCoupon(string shop_id, int coupon_id, bool seller_active = false, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/coupons/" + coupon_id + "?seller_active=" + seller_active + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Deletes a coupon</summary>
        public void deleteCoupon(string shop_id, int coupon_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/coupons/" + coupon_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Get a Shop Payment Account Ledger</summary>
        public Ledger[] findLedger(string shop_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/ledger/?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Ledger[]>(results.ToString(), settings);
        }

        ///<summary>Get a Shop Payment Account Ledger's Entries</summary>
        public LedgerEntry[] findLedgerEntries(string shop_id, string min_created = null, string max_created = null, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/ledger/entries?limit=" + limit + "&offset=" + offset + "&";
            if (min_created != null)
            {
                url += "min_created=" + min_created + "&";
            }
            if (max_created != null)
            {
                url += "max_created=" + max_created + "&";
            }
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<LedgerEntry[]>(results.ToString(), settings);
        }

        ///<summary>Get a Shop Payment Account Ledger Entry</summary>
        public LedgerEntry[] findLedgerEntry(string shop_id, int ledger_entry_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/ledger/entries/" + ledger_entry_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<LedgerEntry[]>(results.ToString(), settings);
        }

        ///<summary>Get a Payment Adjustment from a Ledger Entry ID, if applicable</summary>
        public PaymentAdjustment[] findPaymentAdjustmentForLedgerEntry(string shop_id, int ledger_entry_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/ledger/entries/" + ledger_entry_id + "/adjustment?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<PaymentAdjustment[]>(results.ToString(), settings);
        }

        ///<summary>Get a Payment from a Ledger Entry ID, if applicable</summary>
        public Payment[] findPaymentForLedgerEntry(string shop_id, int ledger_entry_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/ledger/entries/" + ledger_entry_id + "/payment?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Payment[]>(results.ToString(), settings);
        }

        ///<summary>Finds all active Listings associated with a Shop.<br /><br />(<strong>NOTE:</strong> If calling on behalf of a shop owner in the context of listing management, be sure to include the parameter <strong>include_private = true</strong>.  This will return private listings that are not publicly visible in the shop, but which can be managed.  This is an experimental feature and may change.)</summary>
        public Listing[] findAllShopListingsActive(string shop_id, int limit = 25, int offset = 0, string page = null, string keywords = null, string sort_on = "created", string sort_order = "down", string min_price = null, string max_price = null, string color = null, int color_accuracy = 0, string tags = null, string category = null, bool translate_keywords = false, bool include_private = false, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/listings/active?limit=" + limit + "&offset=" + offset + "&sort_on=" + sort_on + "&sort_order=" + sort_order + "&color_accuracy=" + color_accuracy + "&translate_keywords=" + translate_keywords + "&include_private=" + include_private + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (keywords != null)
            {
                url += "keywords=" + keywords + "&";
            }
            if (min_price != null)
            {
                url += "min_price=" + min_price + "&";
            }
            if (max_price != null)
            {
                url += "max_price=" + max_price + "&";
            }
            if (color != null)
            {
                url += "color=" + color + "&";
            }
            if (tags != null)
            {
                url += "tags=" + tags + "&";
            }
            if (category != null)
            {
                url += "category=" + category + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        public int findAllShopListingsActiveCount(string shop_id)
        {
            string url = baseUrl + "/shops/" + shop_id + "/listings/active?limit=1";
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            return (int)objectResult["count"];
        }

        ///<summary>Finds all of a Shop's draft listings</summary>
        public Listing[] findAllShopListingsDraft(string shop_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/listings/draft?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves Listings associated to a Shop that are expired</summary>
        public Listing[] findAllShopListingsExpired(string shop_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/listings/expired?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a Listing associated to a Shop that is inactive</summary>
        public Listing[] getShopListingExpired(string shop_id, int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/listings/expired/" + listing_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves Listings associated to a Shop that are featured</summary>
        public Listing[] findAllShopListingsFeatured(string shop_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/listings/featured?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves Listings associated to a Shop that are inactive</summary>
        public Listing[] findAllShopListingsInactive(string shop_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/listings/inactive?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a Listing associated to a Shop that is inactive</summary>
        public Listing[] getShopListingInactive(string shop_id, int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/listings/inactive/" + listing_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Get a Shop Payment Account Ledger's Entries</summary>
        public PaymentAccountLedgerEntry[] findPaymentAccountEntries(string shop_id, int min_created, int max_created, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/payment_account/entries?min_created=" + min_created + "&max_created=" + max_created + "&limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<PaymentAccountLedgerEntry[]>(results.ToString(), settings);
        }

        ///<summary>Get a Payment Adjustment from a Payment Account Ledger Entry ID, if applicable</summary>
        public PaymentAdjustment[] findPaymentAdjustmentForPaymentAccountLedgerEntry(string shop_id, int ledger_entry_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/payment_account/entries/" + ledger_entry_id + "/adjustment?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<PaymentAdjustment[]>(results.ToString(), settings);
        }

        ///<summary>Get a Payment from a PaymentAccount Ledger Entry ID, if applicable</summary>
        public Payment[] findPaymentForPaymentAccountLedgerEntry(string shop_id, int ledger_entry_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/payment_account/entries/" + ledger_entry_id + "/payment?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Payment[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves the PaymentTemplate associated with the Shop</summary>
        public PaymentTemplate[] findShopPaymentTemplates(string shop_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/payment_templates?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<PaymentTemplate[]>(results.ToString(), settings);
        }

        ///<summary>Creates a new PaymentTemplate</summary>
        public void createShopPaymentTemplate(string shop_id, string allow_check = null, string allow_mo = null, string allow_other = null, string allow_paypal = null, string allow_cc = null, string paypal_email = null, string name = null, string first_line = null, string second_line = null, string city = null, string state = null, string zip = null, string country_id = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/payment_templates?";
            if (allow_check != null)
            {
                url += "allow_check=" + allow_check + "&";
            }
            if (allow_mo != null)
            {
                url += "allow_mo=" + allow_mo + "&";
            }
            if (allow_other != null)
            {
                url += "allow_other=" + allow_other + "&";
            }
            if (allow_paypal != null)
            {
                url += "allow_paypal=" + allow_paypal + "&";
            }
            if (allow_cc != null)
            {
                url += "allow_cc=" + allow_cc + "&";
            }
            if (paypal_email != null)
            {
                url += "paypal_email=" + paypal_email + "&";
            }
            if (name != null)
            {
                url += "name=" + name + "&";
            }
            if (first_line != null)
            {
                url += "first_line=" + first_line + "&";
            }
            if (second_line != null)
            {
                url += "second_line=" + second_line + "&";
            }
            if (city != null)
            {
                url += "city=" + city + "&";
            }
            if (state != null)
            {
                url += "state=" + state + "&";
            }
            if (zip != null)
            {
                url += "zip=" + zip + "&";
            }
            if (country_id != null)
            {
                url += "country_id=" + country_id + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Updates a PaymentTemplate</summary>
        public void updateShopPaymentTemplate(string shop_id, int payment_template_id, string allow_check = null, string allow_mo = null, string allow_other = null, string allow_paypal = null, string allow_cc = null, string paypal_email = null, string name = null, string first_line = null, string second_line = null, string city = null, string state = null, string zip = null, string country_id = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/payment_templates/" + payment_template_id + "?";
            if (allow_check != null)
            {
                url += "allow_check=" + allow_check + "&";
            }
            if (allow_mo != null)
            {
                url += "allow_mo=" + allow_mo + "&";
            }
            if (allow_other != null)
            {
                url += "allow_other=" + allow_other + "&";
            }
            if (allow_paypal != null)
            {
                url += "allow_paypal=" + allow_paypal + "&";
            }
            if (allow_cc != null)
            {
                url += "allow_cc=" + allow_cc + "&";
            }
            if (paypal_email != null)
            {
                url += "paypal_email=" + paypal_email + "&";
            }
            if (name != null)
            {
                url += "name=" + name + "&";
            }
            if (first_line != null)
            {
                url += "first_line=" + first_line + "&";
            }
            if (second_line != null)
            {
                url += "second_line=" + second_line + "&";
            }
            if (city != null)
            {
                url += "city=" + city + "&";
            }
            if (state != null)
            {
                url += "state=" + state + "&";
            }
            if (zip != null)
            {
                url += "zip=" + zip + "&";
            }
            if (country_id != null)
            {
                url += "country_id=" + country_id + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a set of Receipt objects associated to a Shop.</summary>
        public Receipt[] findAllShopReceipts(string shop_id, string min_created = null, string max_created = null, string min_last_modified = null, string max_last_modified = null, int limit = 25, int offset = 0, string page = null, string was_paid = null, string was_shipped = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/receipts?limit=" + limit + "&offset=" + offset + "&";
            if (min_created != null)
            {
                url += "min_created=" + min_created + "&";
            }
            if (max_created != null)
            {
                url += "max_created=" + max_created + "&";
            }
            if (min_last_modified != null)
            {
                url += "min_last_modified=" + min_last_modified + "&";
            }
            if (max_last_modified != null)
            {
                url += "max_last_modified=" + max_last_modified + "&";
            }
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (was_paid != null)
            {
                url += "was_paid=" + was_paid + "&";
            }
            if (was_shipped != null)
            {
                url += "was_shipped=" + was_shipped + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Receipt[]>(results.ToString(), settings);
        }

        ///<summary>Get a Payment by Shop Receipt ID</summary>
        public Payment[] findShopPaymentByReceipt(int receipt_id, string shop_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/receipts/" + receipt_id + "/payments?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Payment[]>(results.ToString(), settings);
        }

        ///<summary>Submits tracking information and sends a shipping notification email to the buyer. If <code>send_bcc</code> is <code>true</code>, the shipping notification will be sent to the seller as well. Refer to <a href="/developers/documentation/getting_started/seller_tools#section_tracking_codes">additional documentation</a>.</summary>
        public void submitTracking(string shop_id, string receipt_id, string tracking_code, string carrier_name, bool send_bcc = false, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/receipts/" + receipt_id + "/tracking?tracking_code=" + tracking_code + "&carrier_name=" + carrier_name + "&send_bcc=" + send_bcc + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a set of Receipt objects associated to a Shop based on the status.</summary>
        public Receipt[] findAllShopReceiptsByStatus(string shop_id, string status, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/receipts/" + status + "?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Receipt[]>(results.ToString(), settings);
        }

        ///<summary>Searches the set of Receipt objects associated to a Shop by a query</summary>
        public Receipt[] searchAllShopReceipts(string shop_id, string search_query, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/receipts/search?search_query=" + search_query + "&limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Receipt[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a list of reviews left for listings purchased from a shop</summary>
        public string getShopReviews(string shop_id, int limit = 30, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/reviews?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Retrieves a set of ShopSection objects associated to a Shop.</summary>
        public ShopSection[] findAllShopSections(string shop_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/sections?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ShopSection[]>(results.ToString(), settings);
        }

        ///<summary>Creates a new ShopSection.</summary>
        public void createShopSection(string shop_id, string title = null, string user_id = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/sections?";
            if (title != null)
            {
                url += "title=" + title + "&";
            }
            if (user_id != null)
            {
                url += "user_id=" + user_id + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a ShopSection by id and shop_id</summary>
        public ShopSection[] getShopSection(string shop_id, int shop_section_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/sections/" + shop_section_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ShopSection[]>(results.ToString(), settings);
        }

        ///<summary>Updates a ShopSection with the given id.</summary>
        public void updateShopSection(string shop_id, int shop_section_id, string title = null, string user_id = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/sections/" + shop_section_id + "?";
            if (title != null)
            {
                url += "title=" + title + "&";
            }
            if (user_id != null)
            {
                url += "user_id=" + user_id + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Deletes the ShopSection with the given id.</summary>
        public void deleteShopSection(string shop_id, int shop_section_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/sections/" + shop_section_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Finds all listings within a shop section</summary>
        public Listing[] findAllShopSectionListings(string shop_id, int shop_section_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/sections/" + shop_section_id + "/listings?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Finds all listings within a shop section</summary>
        public Listing[] findAllShopSectionListingsActive(string shop_id, int shop_section_id, int limit = 25, int offset = 0, string page = null, string sort_on = "created", string sort_order = "down", string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/sections/" + shop_section_id + "/listings/active?limit=" + limit + "&offset=" + offset + "&sort_on=" + sort_on + "&sort_order=" + sort_order + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a ShopSectionTranslation by shop_id, shop_section_id and language</summary>
        public ShopSectionTranslation[] getShopSectionTranslation(string shop_id, int shop_section_id, string language, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/sections/" + shop_section_id + "/translations/" + language + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ShopSectionTranslation[]>(results.ToString(), settings);
        }

        ///<summary>Creates a ShopSectionTranslation by shop_id, shop_section_id and language</summary>
        public void createShopSectionTranslation(string shop_id, int shop_section_id, string language, string title = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/sections/" + shop_section_id + "/translations/" + language + "?";
            if (title != null)
            {
                url += "title=" + title + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Updates a ShopSectionTranslation by shop_id, shop_section_id and language</summary>
        public void updateShopSectionTranslation(string shop_id, int shop_section_id, string language, string title = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/sections/" + shop_section_id + "/translations/" + language + "?";
            if (title != null)
            {
                url += "title=" + title + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Deletes a ShopSectionTranslation by shop_id, shop_section_id and language</summary>
        public void deleteShopSectionTranslation(string shop_id, int shop_section_id, string language, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/sections/" + shop_section_id + "/translations/" + language + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a set of Transaction objects associated to a Shop.</summary>
        public Transaction[] findAllShopTransactions(string shop_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/transactions?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Transaction[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a ShopTranslation by shop_id and language</summary>
        public ShopTranslation[] getShopTranslation(string shop_id, string language, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/translations/" + language + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ShopTranslation[]>(results.ToString(), settings);
        }

        ///<summary>Creates a ShopTranslation by shop_id and language</summary>
        public void createShopTranslation(string shop_id, string language, string title = null, string sale_message = null, string announcement = null, string policy_welcome = null, string policy_payment = null, string policy_shipping = null, string policy_refunds = null, string policy_additional = null, string policy_privacy = null, string policy_seller_info = null, string vacation_autoreply = null, string vacation_message = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/translations/" + language + "?";
            if (title != null)
            {
                url += "title=" + title + "&";
            }
            if (sale_message != null)
            {
                url += "sale_message=" + sale_message + "&";
            }
            if (announcement != null)
            {
                url += "announcement=" + announcement + "&";
            }
            if (policy_welcome != null)
            {
                url += "policy_welcome=" + policy_welcome + "&";
            }
            if (policy_payment != null)
            {
                url += "policy_payment=" + policy_payment + "&";
            }
            if (policy_shipping != null)
            {
                url += "policy_shipping=" + policy_shipping + "&";
            }
            if (policy_refunds != null)
            {
                url += "policy_refunds=" + policy_refunds + "&";
            }
            if (policy_additional != null)
            {
                url += "policy_additional=" + policy_additional + "&";
            }
            if (policy_privacy != null)
            {
                url += "policy_privacy=" + policy_privacy + "&";
            }
            if (policy_seller_info != null)
            {
                url += "policy_seller_info=" + policy_seller_info + "&";
            }
            if (vacation_autoreply != null)
            {
                url += "vacation_autoreply=" + vacation_autoreply + "&";
            }
            if (vacation_message != null)
            {
                url += "vacation_message=" + vacation_message + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Updates a ShopTranslation by shop_id and language</summary>
        public void updateShopTranslation(string shop_id, string language, string title = null, string sale_message = null, string announcement = null, string policy_welcome = null, string policy_payment = null, string policy_shipping = null, string policy_refunds = null, string policy_additional = null, string policy_privacy = null, string policy_seller_info = null, string vacation_autoreply = null, string vacation_message = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/translations/" + language + "?";
            if (title != null)
            {
                url += "title=" + title + "&";
            }
            if (sale_message != null)
            {
                url += "sale_message=" + sale_message + "&";
            }
            if (announcement != null)
            {
                url += "announcement=" + announcement + "&";
            }
            if (policy_welcome != null)
            {
                url += "policy_welcome=" + policy_welcome + "&";
            }
            if (policy_payment != null)
            {
                url += "policy_payment=" + policy_payment + "&";
            }
            if (policy_shipping != null)
            {
                url += "policy_shipping=" + policy_shipping + "&";
            }
            if (policy_refunds != null)
            {
                url += "policy_refunds=" + policy_refunds + "&";
            }
            if (policy_additional != null)
            {
                url += "policy_additional=" + policy_additional + "&";
            }
            if (policy_privacy != null)
            {
                url += "policy_privacy=" + policy_privacy + "&";
            }
            if (policy_seller_info != null)
            {
                url += "policy_seller_info=" + policy_seller_info + "&";
            }
            if (vacation_autoreply != null)
            {
                url += "vacation_autoreply=" + vacation_autoreply + "&";
            }
            if (vacation_message != null)
            {
                url += "vacation_message=" + vacation_message + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Deletes a ShopTranslation by shop_id and language</summary>
        public void deleteShopTranslation(string shop_id, string language, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/" + shop_id + "/translations/" + language + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a shop by a listing id.</summary>
        public Shop[] getListingShop(int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/shops/listing/" + listing_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Shop[]>(results.ToString(), settings);
        }

        ///<summary>Retrieve the entire taxonomy as seen by buyers in search.</summary>
        public Taxonomy[] getBuyerTaxonomy(string includes = null, string fields = null)
        {
            string url = baseUrl + "/taxonomy/buyer/get?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Taxonomy[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves all top-level Categories.</summary>
        public Category[] findAllTopCategory(string includes = null, string fields = null)
        {
            string url = baseUrl + "/taxonomy/categories?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Category[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves children of a top-level Category by tag.</summary>
        public Category[] findAllTopCategoryChildren(string tag, string includes = null, string fields = null)
        {
            string url = baseUrl + "/taxonomy/categories/" + tag + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Category[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves children of a second-level Category by tag and subtag.</summary>
        public Category[] findAllSubCategoryChildren(string tag, string subtag, string includes = null, string fields = null)
        {
            string url = baseUrl + "/taxonomy/categories/" + tag + "/" + subtag + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Category[]>(results.ToString(), settings);
        }

        ///<summary>Get the possible properties of a taxonomy node</summary>
        public TaxonomyNodeProperty[] getTaxonomyNodeProperties(int taxonomy_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/taxonomy/seller/" + taxonomy_id + "/properties?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<TaxonomyNodeProperty[]>(results.ToString(), settings);
        }

        ///<summary>Retrieve the entire taxonomy as used by sellers in the listing process.</summary>
        public Taxonomy[] getSellerTaxonomy(string includes = null, string fields = null)
        {
            string url = baseUrl + "/taxonomy/seller/get?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Taxonomy[]>(results.ToString(), settings);
        }

        ///<summary>Get the current version of the seller taxonomy</summary>
        public Taxonomy[] getSellerTaxonomyVersion(string includes = null, string fields = null)
        {
            string url = baseUrl + "/taxonomy/seller/version?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Taxonomy[]>(results.ToString(), settings);
        }

        ///<summary>Retrieve all suggested styles.</summary>
        public Style[] findSuggestedStyles(string includes = null, string fields = null)
        {
            string url = baseUrl + "/taxonomy/styles?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Style[]>(results.ToString(), settings);
        }

        ///<summary>Returns all Teams</summary>
        public Team[] findAllTeams(int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/teams?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Team[]>(results.ToString(), settings);
        }

        ///<summary>Returns a list of users for a specific team</summary>
        public User[] findAllUsersForTeam(int team_id, string status = "active", int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/teams/" + team_id + "/users/?status=" + status + "&limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<User[]>(results.ToString(), settings);
        }

        ///<summary>Returns specified team by ID or team name</summary>
        public Team[] findTeams(string team_ids, string includes = null, string fields = null)
        {
            string url = baseUrl + "/teams/" + team_ids + "/?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Team[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a Shop_Transaction by id.</summary>
        public Transaction[] getShop_Transaction(int transaction_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/transactions/" + transaction_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Transaction[]>(results.ToString(), settings);
        }

        ///<summary>Search Treasuries or else List all Treasuries</summary>
        public Treasury[] findAllTreasuries(string keywords = null, string sort_on = "hotness", string sort_order = "down", int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/treasuries?sort_on=" + sort_on + "&sort_order=" + sort_order + "&limit=" + limit + "&offset=" + offset + "&";
            if (keywords != null)
            {
                url += "keywords=" + keywords + "&";
            }
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Treasury[]>(results.ToString(), settings);
        }

        ///<summary>Get a Treasury</summary>
        public Treasury[] getTreasury(string treasury_key, string includes = null, string fields = null)
        {
            string url = baseUrl + "/treasuries/" + treasury_key + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Treasury[]>(results.ToString(), settings);
        }

        ///<summary>Delete a Treasury</summary>
        public void deleteTreasury(string treasury_key, string includes = null, string fields = null)
        {
            string url = baseUrl + "/treasuries/" + treasury_key + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Get a Treasury's Comments</summary>
        public ForumPost[] findTreasuryComments(string treasury_key, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/treasuries/" + treasury_key + "/comments?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ForumPost[]>(results.ToString(), settings);
        }

        ///<summary>Leave a comment on a Treasury List</summary>
        public void postTreasuryComment(string treasury_key, string message, string includes = null, string fields = null)
        {
            string url = baseUrl + "/treasuries/" + treasury_key + "/comments?message=" + message + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Delete a given comment on a Treasury List</summary>
        public void deleteTreasuryComment(string treasury_key, string comment_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/treasuries/" + treasury_key + "/comments/" + comment_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Add listing to a Treasury</summary>
        public void addTreasuryListing(string treasury_key, int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/treasuries/" + treasury_key + "/listings?listing_id=" + listing_id + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Remove listing from a Treasury</summary>
        public void removeTreasuryListing(string treasury_key, int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/treasuries/" + treasury_key + "/listings/" + listing_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Describes the legal values for Listing.occasion.</summary>
        public DataType[] describeOccasionEnum(string includes = null, string fields = null)
        {
            string url = baseUrl + "/types/enum/occasion?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<DataType[]>(results.ToString(), settings);
        }

        ///<summary>Describes the legal values for Listing.recipient.</summary>
        public DataType[] describeRecipientEnum(string includes = null, string fields = null)
        {
            string url = baseUrl + "/types/enum/recipient?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<DataType[]>(results.ToString(), settings);
        }

        ///<summary>Describes the legal values for Listing.when_made.</summary>
        public DataType[] describeWhenMadeEnum(string include_formatted = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/types/enum/when_made?";
            if (include_formatted != null)
            {
                url += "include_formatted=" + include_formatted + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<DataType[]>(results.ToString(), settings);
        }

        ///<summary>Describes the legal values for Listing.who_made.</summary>
        public DataType[] describeWhoMadeEnum(string includes = null, string fields = null)
        {
            string url = baseUrl + "/types/enum/who_made?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<DataType[]>(results.ToString(), settings);
        }

        ///<summary>Finds all Users whose name or username match the keywords parameter.</summary>
        public User[] findAllUsers(string keywords = null, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users?limit=" + limit + "&offset=" + offset + "&";
            if (keywords != null)
            {
                url += "keywords=" + keywords + "&";
            }
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<User[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a User by id.</summary>
        public User[] getUser(string user_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<User[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a set of UserAddress objects associated to a User.</summary>
        public UserAddress[] findAllUserAddresses(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/addresses?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<UserAddress[]>(results.ToString(), settings);
        }

        ///<summary>Creates a new UserAddress. Note: state is required when the country is US, Canada, or Australia. See section above about valid codes.</summary>
        public void createUserAddress(string user_id, string name, string first_line, string city, string zip, int country_id, string second_line = null, string state = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/addresses/?name=" + name + "&first_line=" + first_line + "&city=" + city + "&zip=" + zip + "&country_id=" + country_id + "&";
            if (second_line != null)
            {
                url += "second_line=" + second_line + "&";
            }
            if (state != null)
            {
                url += "state=" + state + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a UserAddress by id.</summary>
        public UserAddress[] getUserAddress(int user_address_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/__SELF__/addresses/" + user_address_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<UserAddress[]>(results.ToString(), settings);
        }

        ///<summary>Deletes the UserAddress with the given id.</summary>
        public void deleteUserAddress(int user_address_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/__SELF__/addresses/" + user_address_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Upload a new user avatar image</summary>
        public void uploadAvatar(string user_id, string src = null, string image = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/avatar?";
            if (src != null)
            {
                url += "src=" + src + "&";
            }
            if (image != null)
            {
                url += "image=" + image + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Get avatar image source</summary>
        public Avatar[] getAvatarImgSrc(string user_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/avatar/src?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Avatar[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves the user's current balance.</summary>
        public BillingOverview[] getUserBillingOverview(string user_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/billing/overview?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<BillingOverview[]>(results.ToString(), settings);
        }

        ///<summary>Get a user's Carts</summary>
        public Cart[] getAllUserCarts(string user_id, int limit = 100, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/carts?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Cart[]>(results.ToString(), settings);
        }

        ///<summary>Add a listing to a cart</summary>
        public void addToCart(string user_id, int listing_id, int quantity = 1, string selected_variations = null, string personalization = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/carts?listing_id=" + listing_id + "&quantity=" + quantity + "&";
            if (selected_variations != null)
            {
                url += "selected_variations=" + selected_variations + "&";
            }
            if (personalization != null)
            {
                url += "personalization=" + personalization + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Update a cart listing purchase quantity</summary>
        public void updateCartListingQuantity(string user_id, int listing_id, int quantity, int listing_customization_id = 0, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/carts?listing_id=" + listing_id + "&quantity=" + quantity + "&listing_customization_id=" + listing_customization_id + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Remove a listing from a cart</summary>
        public void removeCartListing(string user_id, int listing_id, int listing_customization_id = 0, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/carts?listing_id=" + listing_id + "&listing_customization_id=" + listing_customization_id + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Get a cart</summary>
        public Cart[] getUserCart(string user_id, string cart_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/carts/" + cart_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Cart[]>(results.ToString(), settings);
        }

        ///<summary>Update a cart</summary>
        public void updateCart(string user_id, string cart_id, string destination_country_id = null, string message_to_seller = null, string coupon_code = null, string shipping_option_id = null, string destination_zip = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/carts/" + cart_id + "?";
            if (destination_country_id != null)
            {
                url += "destination_country_id=" + destination_country_id + "&";
            }
            if (message_to_seller != null)
            {
                url += "message_to_seller=" + message_to_seller + "&";
            }
            if (coupon_code != null)
            {
                url += "coupon_code=" + coupon_code + "&";
            }
            if (shipping_option_id != null)
            {
                url += "shipping_option_id=" + shipping_option_id + "&";
            }
            if (destination_zip != null)
            {
                url += "destination_zip=" + destination_zip + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Delete a cart</summary>
        public void deleteCart(string user_id, string cart_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/carts/" + cart_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Saves and selects a shipping address for apple pay</summary>
        public void addAndSelectShippingForApplePay(string user_id, string cart_id, string city, string zip, int country_id, string second_line = null, string state = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/carts/" + cart_id + "/add_and_select_shipping_for_apple?city=" + city + "&zip=" + zip + "&country_id=" + country_id + "&";
            if (second_line != null)
            {
                url += "second_line=" + second_line + "&";
            }
            if (state != null)
            {
                url += "state=" + state + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Finds all listings in a given Cart</summary>
        public Listing[] findAllCartListings(string user_id, string cart_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/carts/" + cart_id + "/listings?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Listing[]>(results.ToString(), settings);
        }

        ///<summary>Move a listing to Saved for Later</summary>
        public void saveListingForLater(string user_id, int cart_id, int listing_id, int listing_inventory_id = 0, int listing_customization_id = 0, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/carts/save?cart_id=" + cart_id + "&listing_id=" + listing_id + "&listing_inventory_id=" + listing_inventory_id + "&listing_customization_id=" + listing_customization_id + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Get a cart from a shop ID</summary>
        public Cart[] getUserCartForShop(string user_id, string shop_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/carts/shop/" + shop_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Cart[]>(results.ToString(), settings);
        }

        ///<summary>Create a single-listing cart from a listing</summary>
        public void createSingleListingCart(string user_id, int listing_id, int quantity = 1, string selected_variations = null, string personalization = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/carts/single_listing?listing_id=" + listing_id + "&quantity=" + quantity + "&";
            if (selected_variations != null)
            {
                url += "selected_variations=" + selected_variations + "&";
            }
            if (personalization != null)
            {
                url += "personalization=" + personalization + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a set of BillCharge objects associated to a User. NOTE: from 8/8/12 the min_created and max_created arguments will be mandatory and can be no more than 31 days apart.</summary>
        public BillCharge[] findAllUserCharges(string user_id, int limit = 25, int offset = 0, string page = null, string sort_order = "up", string min_created = null, string max_created = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/charges?limit=" + limit + "&offset=" + offset + "&sort_order=" + sort_order + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (min_created != null)
            {
                url += "min_created=" + min_created + "&";
            }
            if (max_created != null)
            {
                url += "max_created=" + max_created + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<BillCharge[]>(results.ToString(), settings);
        }

        ///<summary>Metadata for the set of BillCharges objects associated to a User</summary>
        public string getUserChargesMetadata(string user_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/charges/meta?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            return json;
        }

        ///<summary>Returns a list of users who have circled this user</summary>
        public User[] getCirclesContainingUser(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/circles?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<User[]>(results.ToString(), settings);
        }

        ///<summary>Returns details about a connection between users</summary>
        public User[] getConnectedUser(string user_id, string to_user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/circles/" + to_user_id + "?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<User[]>(results.ToString(), settings);
        }

        ///<summary>Removes a user (to_user_id) from the logged in user's (user_id) circle</summary>
        public void unconnectUsers(string user_id, string to_user_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/circles/" + to_user_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Lists the pages that the current user is following</summary>
        public Page[] listFollowingPages(int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/__SELF__/connected_pages?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Page[]>(results.ToString(), settings);
        }

        ///<summary>Follow a page.</summary>
        public void followPage(string user_id, int page_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/connected_pages?page_id=" + page_id + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Unfollow a page.</summary>
        public void unfollowPage(string user_id, int page_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/connected_pages/" + page_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Returns a list of users that are in this user's cricle</summary>
        public User[] getConnectedUsers(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/connected_users?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<User[]>(results.ToString(), settings);
        }

        ///<summary>Adds user (to_user_id) to the user's (user_id) circle</summary>
        public void connectUsers(string user_id, string to_user_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/connected_users?to_user_id=" + to_user_id + "&";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a set of FavoriteUser objects associated to a User.</summary>
        public FavoriteUser[] findAllUserFavoredBy(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/favored-by?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<FavoriteUser[]>(results.ToString(), settings);
        }

        ///<summary>Finds all favorite listings for a user</summary>
        public FavoriteListing[] findAllUserFavoriteListings(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/favorites/listings?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<FavoriteListing[]>(results.ToString(), settings);
        }

        ///<summary>Finds a favorite listing for a user</summary>
        public FavoriteListing[] findUserFavoriteListings(string user_id, int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/favorites/listings/" + listing_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<FavoriteListing[]>(results.ToString(), settings);
        }

        ///<summary>Creates a new favorite listing for a user</summary>
        public void createUserFavoriteListings(string user_id, int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/favorites/listings/" + listing_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Delete a favorite listing for a user</summary>
        public void deleteUserFavoriteListings(string user_id, int listing_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/favorites/listings/" + listing_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Finds all favorite users for a user</summary>
        public FavoriteUser[] findAllUserFavoriteUsers(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/favorites/users?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<FavoriteUser[]>(results.ToString(), settings);
        }

        ///<summary>Finds a favorite user for a user</summary>
        public FavoriteUser[] findUserFavoriteUsers(string user_id, string target_user_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/favorites/users/" + target_user_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<FavoriteUser[]>(results.ToString(), settings);
        }

        ///<summary>Creates a new favorite listing for a user</summary>
        public void createUserFavoriteUsers(string user_id, string target_user_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/favorites/users/" + target_user_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Delete a favorite listing for a user</summary>
        public void deleteUserFavoriteUsers(string user_id, string target_user_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/favorites/users/" + target_user_id + "?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a set of Feedback objects associated to a User.</summary>
        public Feedback[] findAllUserFeedbackAsAuthor(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/feedback/as-author?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Feedback[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a set of Feedback objects associated to a User.</summary>
        public Feedback[] findAllUserFeedbackAsBuyer(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/feedback/as-buyer?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Feedback[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a set of Feedback objects associated to a User.</summary>
        public Feedback[] findAllUserFeedbackAsSeller(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/feedback/as-seller?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Feedback[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a set of Feedback objects associated to a User.</summary>
        public Feedback[] findAllUserFeedbackAsSubject(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/feedback/as-subject?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Feedback[]>(results.ToString(), settings);
        }

        ///<summary>                    Returns a set of FeedBack objects associated to a User.                    This is essentially the union between the findAllUserFeedbackAsBuyer                    and findAllUserFeedbackAsSubject methods.</summary>
        public Feedback[] findAllFeedbackFromBuyers(string user_id = null, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/feedback/from-buyers?limit=" + limit + "&offset=" + offset + "&";
            if (user_id != null)
            {
                url += "user_id=" + user_id + "&";
            }
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Feedback[]>(results.ToString(), settings);
        }

        ///<summary>                    Returns a set of FeedBack objects associated to a User.                    This is essentially the union between                    the findAllUserFeedbackAsBuyer and findAllUserFeedbackAsSubject methods.</summary>
        public Feedback[] findAllFeedbackFromSellers(string user_id = null, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/feedback/from-sellers?limit=" + limit + "&offset=" + offset + "&";
            if (user_id != null)
            {
                url += "user_id=" + user_id + "&";
            }
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Feedback[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a set of BillPayment objects associated to a User.</summary>
        public BillPayment[] findAllUserPayments(string user_id, int limit = 25, int offset = 0, string page = null, string sort_order = "up", string min_created = null, string max_created = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/payments?limit=" + limit + "&offset=" + offset + "&sort_order=" + sort_order + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (min_created != null)
            {
                url += "min_created=" + min_created + "&";
            }
            if (max_created != null)
            {
                url += "max_created=" + max_created + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<BillPayment[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a set of PaymentTemplate objects associated to a User.</summary>
        public PaymentTemplate[] findAllUserPaymentTemplates(string user_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/payments/templates?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<PaymentTemplate[]>(results.ToString(), settings);
        }

        ///<summary>Returns the UserProfile object associated with a User.</summary>
        public UserProfile[] findUserProfile(string user_id, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/profile?";
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<UserProfile[]>(results.ToString(), settings);
        }

        ///<summary>Updates the UserProfile object associated with a User. <br /><b>Notes:</b><ul><li>Name changes are subject to admin review and therefore unavailable via the API.</li><li>Materials must be provided as a <i>period-separated</i> list of ASCII words.</ul></summary>
        public void updateUserProfile(string user_id, string bio = null, string gender = null, string birth_month = null, string birth_day = null, string birth_year = null, string materials = null, string country_id = null, string region = null, string city = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/profile?";
            if (bio != null)
            {
                url += "bio=" + bio + "&";
            }
            if (gender != null)
            {
                url += "gender=" + gender + "&";
            }
            if (birth_month != null)
            {
                url += "birth_month=" + birth_month + "&";
            }
            if (birth_day != null)
            {
                url += "birth_day=" + birth_day + "&";
            }
            if (birth_year != null)
            {
                url += "birth_year=" + birth_year + "&";
            }
            if (materials != null)
            {
                url += "materials=" + materials + "&";
            }
            if (country_id != null)
            {
                url += "country_id=" + country_id + "&";
            }
            if (region != null)
            {
                url += "region=" + region + "&";
            }
            if (city != null)
            {
                url += "city=" + city + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
        }

        ///<summary>Retrieves a set of Receipt objects associated to a User.</summary>
        public Receipt[] findAllUserBuyerReceipts(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/receipts?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Receipt[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a set of ShippingTemplate objects associated to a User.</summary>
        public ShippingTemplate[] findAllUserShippingProfiles(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/shipping/templates?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<ShippingTemplate[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a set of Shop objects associated to a User.</summary>
        public Shop[] findAllUserShops(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/shops?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Shop[]>(results.ToString(), settings);
        }

        ///<summary>Returns a list of teams for a specific user</summary>
        public Team[] findAllTeamsForUser(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/teams?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Team[]>(results.ToString(), settings);
        }

        ///<summary>Retrieves a set of Transaction objects associated to a User.</summary>
        public Transaction[] findAllUserBuyerTransactions(string user_id, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/transactions?limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Transaction[]>(results.ToString(), settings);
        }

        ///<summary>Get a user's Treasuries. <strong>Note:</strong> The <code>treasury_r</code> permission scope is required in order to display private Treasuries for a user when the boolean parameter <code>include_private</code> is <code>true</code>.</summary>
        public Treasury[] findAllUserTreasuries(string user_id, string sort_on = "hotness", string sort_order = "down", bool include_private = false, int limit = 25, int offset = 0, string page = null, string includes = null, string fields = null)
        {
            string url = baseUrl + "/users/" + user_id + "/treasuries?sort_on=" + sort_on + "&sort_order=" + sort_order + "&include_private=" + include_private + "&limit=" + limit + "&offset=" + offset + "&";
            if (page != null)
            {
                url += "page=" + page + "&";
            }
            if (includes != null)
            {
                url += "includes=" + includes + "&";
            }
            if (fields != null)
            {
                url += "fields=" + fields + "&";
            }
            string json = Oauth.RetrieveInfo(url, Session);
            JObject objectResult = JObject.Parse(json);
            JArray results = (JArray)objectResult["results"];
            return JsonConvert.DeserializeObject<Treasury[]>(results.ToString(), settings);
        }

    }
}
